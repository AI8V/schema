/**
 * @file dynamicPromptGenerator.js
 * @description وحدة مستقلة لتوليد برومبت ذكاء اصطناعي ديناميكي ومخصص.
 * @version 2.0.0
 * @author Your Name/Company
 *
 * هذه الوحدة تقوم بتطبيق استراتيجية "الهندسة الديناميكية للبرومبت" المحصّنة.
 * تأخذ نوع السكيما الذي يختاره المستخدم كمدخل، وتنتج برومبتًا كاملاً
 * ومخصصًا يوجه نموذج الذكاء الاصطناعي لتحسين بنية سكيما موجودة مسبقًا.
 */

// نستخدم نمط "الوحدة" (Module Pattern) لإنشاء نطاق خاص ومنع تلوث النطاق العام.
const DynamicPromptGenerator = (function () {

    // ===================================================================
    //  1. القالب الأساسي للبرومبت (The Master Prompt Template v2.0)
    // ===================================================================

    /**
     * القالب الأساسي للبرومبت المحصّن والنهائي.
     * يستخدم `{{SCHEMA_TYPE}}` كمتغير نائب (placeholder) ديناميكي.
     * هذا البرومبت يفرض على الذكاء الاصطناعي العمل كمُحسِّن وليس كمنشئ.
     * @type {string}
     */
    const PROMPT_TEMPLATE = `أنت مُدقِّق بيانات منظمة (Schema Auditor) خبير، ومهمتك هي تحسين كود JSON-LD موجود مسبقًا وليس إنشاء واحد من الصفر.

سأزودك بثلاثة مدخلات:
1.  \`page.html\`: ملف المحتوى الأصلي.
2.  \`base_schema.jsonld\`: هذا هو **الهيكل الأساسي والموثوق** الذي تم توليده من أداتنا. **يجب أن تعتبر هذا الهيكل هو مصدر الحقيقة الوحيد للبنية العامة.**
3.  \`PRIMARY_ENTITY_TYPE\`: متغير نصي يحدد الكيان الرئيسي الذي تم اختياره، وقيمته هي **\`{{SCHEMA_TYPE}}\`**.

**مهمتك المطلوبة هي اتباع هذه الخوارزمية الصارمة، خطوة بخطوة، دون انحراف:**

**المرحلة الأولى: التحسين داخل الهيكل الموجود**
1.  ابدأ بملف \`base_schema.jsonld\` كما هو. **لا تغير ترتيب الحقول أو بنيته الأساسية في هذه المرحلة.**
2.  **تنظيف البيانات:**
    *   اذهب إلى حقل \`sku\` ونظّف قيمته لتكون الرمز الفعلي فقط (مثال: "KF-PCX1-2025").
    *   اذهب إلى حقل \`price\` ونظّف قيمته لتكون الرقم العشري فقط (مثال: "999.00").
3.  **إضافة خاصية المراجعة (\`review\`):**
    *   فقط إذا كان \`PRIMARY_ENTITY_TYPE\` هو \`Product\`، تحقق من وجود بيانات مقال (مؤلف وتاريخ نشر) في ملف \`base_schema.jsonld\` (قد تكون داخل \`hasPart\` أو في المستوى الأعلى).
    *   إذا وجدت، قم بإنشاء خاصية \`"review"\` داخل كائن المنتج الرئيسي. انقل بيانات المؤلف والتاريخ إليها، ثم **احذف** كيان \`Article\` الثانوي بالكامل من \`hasPart\` لمنع التكرار.

**المرحلة الثانية: إعادة الهيكلة والتنسيق النهائي**
1.  **قاعدة الفصل الذكي (Smart Detachment Rule):**
    *   انظر إلى الهيكل المُحسَّن الآن. إذا كان كيان \`FAQPage\` موجودًا داخل \`hasPart\` في الكيان الرئيسي، قم **بفصله** من هناك.
    *   أنشئ كتلة \`<script type="application/ld+json">\` ثانية ومستقلة تمامًا وضع فيها كود \`FAQPage\` الذي فصلته.
2.  **التحقق من الصلاحية:**
    *   قبل إنهاء عملك، قم بمراجعة ذاتية لكود JSON-LD النهائي. تأكد من أن جميع الأقواس والفواصل صحيحة 100%. **هذه خطوة إلزامية.**

**المرحلة الثالثة: بناء المخرج النهائي**
1.  خذ ملف \`page.html\` الأصلي كما هو.
2.  قم بإدراج جميع كتل \`<script>\` التي نتجت عن عملك (سواء كانت كتلة واحدة أو اثنتين) داخل وسم \`<head>\`، وقبل وسم \`</head>\` مباشرة.
3.  **لا تلمس أي جزء آخر من الـ HTML.**

**المخرج النهائي المطلوب:**
محتوى ملف HTML الكامل، بدءًا من \`<!DOCTYPE html>\` وانتهاءً بـ \`</html>\`، متضمنًا السكيما الجديدة والمحسّنة والصالحة.`;


    // ===================================================================
    //  2. الوظيفة العامة (Public Function)
    // ===================================================================

    /**
     * تقوم بتوليد البرومبت النهائي بناءً على نوع السكيما المختار.
     * @param {string} selectedSchemaType - نوع السكيما الذي اختاره المستخدم (مثل "Product", "Recipe").
     * @returns {string|null} - سلسلة نصية تحتوي على البرومبت المخصص، أو null إذا كان المدخل غير صالح.
     */
    function generatePrompt(selectedSchemaType) {
        // التحقق من صحة المدخلات لضمان عدم حدوث أخطاء
        if (!selectedSchemaType || typeof selectedSchemaType !== 'string') {
            // i18n-key: errorInvalidSchemaType
            console.error("خطأ: يجب توفير نوع سكيما صالح.");
            return null;
        }

        // نستخدم التعبير النمطي (RegExp) مع العلامة 'g' (global)
        // لضمان استبدال كل المتغيرات النائبة في القالب، وليس فقط أول واحد.
        const placeholderRegex = /{{SCHEMA_TYPE}}/g;
        
        const finalPrompt = PROMPT_TEMPLATE.replace(placeholderRegex, selectedSchemaType);

        return finalPrompt;
    }

    // نقوم بإرجاع كائن يحتوي على الوظائف التي نريد جعلها عامة (متاحة للاستخدام الخارجي)
    // في هذه الحالة، هي وظيفة واحدة فقط.
    return {
        generate: generatePrompt
    };

})();

// ملاحظة: لا حاجة لتغيير أي شيء في "كيفية الاستخدام" لأن الواجهة
// البرمجية (API) للوحدة لم تتغير. لا يزال يستدعي `DynamicPromptGenerator.generate(type)`.